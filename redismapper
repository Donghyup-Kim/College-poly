package kopo.poly.service.impl;

import kopo.poly.dto.RedisDTO;
import kopo.poly.persistance.mongodb.IMyRedisMapper;
import kopo.poly.service.IMyRedisService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.cache.CacheProperties;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.*;

@Slf4j
@Service("MyRedisService")
public class MyRedisSerivce implements IMyRedisService {

    @Resource(name = "MyRedisMapper")
    private IMyRedisMapper myRedisMapper;


    @Override
    public int saveRedisString() throws Exception {

        log.info(this.getClass().getName() + "saveRedisString start");

        String redisKey = "myRedis_String";

        RedisDTO pDTO = new RedisDTO();
        pDTO.setTest_text("난 String타입으로 저장할 일반 문자열이다");

        int res = myRedisMapper.saveRedisString(redisKey, pDTO);

        log.info(this.getClass().getName() + "saveRedisString end");

        return res;
    }

    @Override
    public RedisDTO getRedisStirng() throws Exception {

        log.info(this.getClass().getName() + ".getRedisString Start");

        String redisKey = "myRedis_String";

        RedisDTO rDTO = myRedisMapper.getRedisString(redisKey);

        if(rDTO == null) {

            rDTO = new RedisDTO();
        }
        log.info(this.getClass().getName() + ".getRedisString End");


        return rDTO;
    }

    @Override
    public int saveRedisStringJSON() throws Exception {

        log.info(this.getClass().getName() + "saveRedisStringJSON start");

        String redisKey = "myRedis_String_JSON";

        RedisDTO pDTO = new RedisDTO();
        pDTO.setTest_text("2120110003 김동협 입니다");
        pDTO.setName("김동협");
        pDTO.setAddr("서울");
        pDTO.setEmail("donghyup56@naver.com");


        int res = myRedisMapper.saveRedisStringJSON(redisKey, pDTO);

        log.info(this.getClass().getName() + "saveRedisStringJSON end");

        return res;

    }

    @Override
    public RedisDTO getRedisStringJSON() throws Exception {

        log.info(this.getClass().getName() + "service getRedisStringJSON start");

        String redisKey = "myRedis_String_JSON";

        RedisDTO rDTO = myRedisMapper.getRedisString(redisKey);

        if(rDTO == null) {

            rDTO = new RedisDTO();
        }
        log.info(this.getClass().getName() + "service getRedisStringJSON end");


        return rDTO;
    }

    @Override
    public int saveRedisList() throws Exception {

        log.info(this.getClass().getName() + "service saveRedisList start");

        String redisKey = "myRedis_List";

        List<RedisDTO> pList = new LinkedList<>();

        for (int i = 0; i < 10; i++) {

            RedisDTO pDTO = new RedisDTO();
            pDTO.setTest_text(i + "번째 데이터입니다");

            pList.add(pDTO);
            pDTO = null;
        }

        int res = myRedisMapper.saveRedisList(redisKey, pList);

        log.info(this.getClass().getName() + "service saveRedisList end");

        return res;
    }

    @Override
    public List<String> getRedisList() throws Exception {

        log.info(this.getClass().getName() + "service getRedisList start");

        String redisKey = "myRedis_List";

        List<String> rList = myRedisMapper.getRedisList(redisKey);

        if(rList == null) {
            rList = new LinkedList<>();
        }

        log.info(this.getClass().getName() + "service getRedisList end");

        return rList;
    }

    @Override
    public int saveRedisListJSON() throws Exception {

        log.info(this.getClass().getName() + "service getRedisListJSON start");

        String redisKey = "myRedis_List_JSON";

        List<RedisDTO> pList = new LinkedList<>();

        for (int i = 0; i < 10; i++) {

            RedisDTO pDTO = new RedisDTO();
            pDTO.setTest_text(i + "번째 데이터입니다");
            pDTO.setName("김동협[" + i + "]");
            pDTO.setAddr("서울");
            pDTO.setEmail("donghyup56@naver.com");

            pList.add(pDTO);
            pDTO = null;
        }
        int res = myRedisMapper.saveRedisListJSON(redisKey, pList);

        log.info(this.getClass().getName() + "service getRedisListJSON end");

        return res;
    }

    @Override
    public List<RedisDTO> getRedisListJSON() throws Exception {

        log.info(this.getClass().getName() + "service getRedisListJSON start");

        String redisKey = "myRedis_List_JSON";

        List<RedisDTO> rList = myRedisMapper.getRedisListJSON(redisKey);

        if( rList == null) {
            rList = new LinkedList<>();
        }
        log.info(this.getClass().getName() + "service getRedisListJSON end");

        return rList;
    }

    @Override
    public int saveRedisListJSONRamda() throws Exception {

        log.info(this.getClass().getName() + "service saveRedisListJSONRamda start");

        String redisKey = "myRedis_List_JSON_Ramda";

        List<RedisDTO> pList = new ArrayList<>();

        for (int i = 0; i < 100; i++) {

            RedisDTO pDTO = new RedisDTO();
            pDTO.setTest_text(i + "번째 데이터입니다");
            pDTO.setName("김동협[" + i + "]");
            pDTO.setAddr("서울");
            pDTO.setEmail("donghyup56@naver.com");

            pList.add(pDTO);
            pDTO = null;

        }
        int res = myRedisMapper.saveRedisListJSONRamda(redisKey,pList);

        log.info(this.getClass().getName() + "service saveRedisListJSONRamda end");


        return res;
    }

    @Override
    public List<RedisDTO> getRedisListJSONRamda() throws Exception {

        log.info(this.getClass().getName() + "service getRedisListJSONRamda start");

        String redisKey = "myRedis_List_JSON_Ramda";

        List<RedisDTO> rList = myRedisMapper.getRedisListJSON(redisKey);

        if( rList == null) {
            rList = new LinkedList<>();
        }
        log.info(this.getClass().getName() + "service getRedisListRamda end");

        return rList;

    }

    @Override
    public int saveRedisHash() throws Exception {

        log.info(this.getClass().getName() + "service saveRedisHash start");

        String redisKey = "myRedis_Hash";

        RedisDTO pDTO = new RedisDTO();
        pDTO.setName("김동협");
        pDTO.setAddr("서울");
        pDTO.setEmail("donghyup56@naver.com");

        int res = myRedisMapper.saveRedisHash(redisKey, pDTO);

        log.info(this.getClass().getName() + "service saveRedisHash end");

        return res;
    }

    @Override
    public RedisDTO getRedisHash() throws Exception {

        log.info(this.getClass().getName() + "service getRedisHash start");

        String redisKey = "myRedis_Hash";

        RedisDTO rDTO = myRedisMapper.getRedisHash(redisKey);

        if( rDTO == null) {
            rDTO = new RedisDTO();
        }
        log.info(this.getClass().getName() + "service getRedisHash end");

        return rDTO;
    }

    @Override
    public int saveRedisSetJSONRamda() throws Exception {

        log.info(this.getClass().getName() + "service saveRedisSetJSONRamda start");

        String redisKey = "myRedis_Set_JSON";

        Set<RedisDTO> pSet = new HashSet<>();

        for (int i = 0; i < 10; i++) {

            RedisDTO pDTO = new RedisDTO();
            pDTO.setTest_text(i + "번째 데이터입니다");
            pDTO.setName("김동협[" + i +"]");
            pDTO.setAddr("서울");
            pDTO.setEmail("donghyup56@naver.com");

            pSet.add(pDTO);
            pDTO= null;
        }

        int res = myRedisMapper.saveRedisSetJSONRamda(redisKey, pSet);

        log.info(this.getClass().getName()+ "service saveRedisSetJSONRamda end");

        return res;
    }

    @Override
    public Set<RedisDTO> getRedisSetJSONRamda() throws Exception {

        log.info(this.getClass().getName() + "service getRedisSetJSONRamda start");

        String redisKey = "myRedis_Set_JSON";

        Set<RedisDTO> rSet = myRedisMapper.getRedisSetJSONRamda(redisKey);

        if(rSet == null) {
            rSet = new HashSet<>();
        }
        log.info(this.getClass().getName() + "service getRedisSetJSONRamda end");
        return rSet;
    }

    @Override
    public int saveRedisZSetJSON() throws Exception {

        log.info(this.getClass().getName() + "service saveRedisZSetJSON start");

        String redisKey = "myRedis_Zset_JSON";

        List<RedisDTO> pList = new LinkedList<>();

        for(int i = 0; i <10; i++) {

            RedisDTO pDTO = new RedisDTO();
            pDTO.setTest_text(i + "번째 데이터입니다");
            pDTO.setName("김동협[" + i +"]");
            pDTO.setAddr("서울");
            pDTO.setEmail("donghyup56@naver.com");

            pList.add(pDTO);
            pDTO = null;
        }

        int res = myRedisMapper.saveRedisZSetJSON(redisKey,pList);

        log.info(this.getClass().getName()+ "service saveRedisZSetJSON end");


        return res;
    }

    @Override
    public Set<RedisDTO> getRedisZSetJSON() throws Exception {

        log.info(this.getClass().getName() + "service getRedisZSetJSON start");

        String redisKey = "myRedis_Zset_JSON";

        Set<RedisDTO> rSet = myRedisMapper.getRedisZSetJSON(redisKey);

        if(rSet == null) {
            rSet = new HashSet<>();
        }

        log.info(this.getClass().getName() + "service getRedisZSetJSON end");

        return rSet;
    }

    @Override
    public boolean deleteDataJSON() throws Exception {

        log.info(this.getClass().getName() + "service delteDataJSON start");

        String redisKey = "myRedis_Zset_JSON";

        boolean res = myRedisMapper.deleteDataJSON(redisKey);

        log.info(this.getClass().getName() + "service deleteDataJSON end");

        return res;
    }

    @Override
    public boolean deleteDataString() throws Exception {

        log.info(this.getClass().getName() + "service deleteDataString start");

        String redisKey = "Ziplist_TestKey";

        boolean res = myRedisMapper.deleteDataString(redisKey);

        log.info(this.getClass().getName() + "service deleteDataString end");

        return res;
    }


}
